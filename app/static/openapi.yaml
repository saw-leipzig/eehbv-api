openapi: 3.0.3
info:
  title: EEHBV backend - OpenAPI 3.0
  description: |-
    This is the OpenAPI/Swagger description of a backend server for the EEHBV web application.
    
    Sources:
    - [EHBV Frontend](https://github.com/saw-leipzig/eehbv-frontend-proto)
    - [EEHBV Backend](https://github.com/saw-leipzig/eehbv-backend-python)
    - [The source API definition for EEHBV](https://github.com/saw-leipzig/eehbv-backend-python/blob/master/app/api/openapi.yaml)
  license:
    name: MIT license
    url: https://opensource.org/license/mit/
  version: '1.0'
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: ../api/v1
tags:
  - name: components
    description: Everything about machine components
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: machines
    description: Everything about machines
  - name: processes
    description: Operations about process/machine types
  - name: problems
    description: Optimization
  - name: properties
    description: Specific material properties
  - name: glossary
    description: Operations about glossary
  - name: users
    description: Operations about users
  - name: auth
    description: Authentication and authorization
paths:
  /auth/login:
    post:
      tags:
        - auth
      summary: Login to application
      description: Login to application with credentials
      operationId: login
      requestBody:
        description: Login with with username and password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth'
        required: true
      responses:
        '200':
          description: Successfull login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '20x':
          description: Bad credentials
          content:
            text/plain:
              schema:
                type: string
                enum:
                  - Wrong password
                  - No such user

  /auth/hash:
    post:
      tags:
        - auth
      summary: Build password hash
      description: Hash password for creating test users during development
      operationId: hash_password
  /users:
    get:
      tags:
        - users
      summary: List users
      description: List all users (admin only)
      operationId: get_users
    post:
      tags:
        - users
      summary: Create user
      description: Create new user (admin only)
      operationId: new_user
  /users/{userId}:
    delete:
      tags:
        - users
      summary: Delete user
      description: Delete user by id (admin only)
      operationId: del_user
      parameters:
        - name: userId
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: integer
            format: int64
  /users/{userId}/password:
    put:
      tags:
        - users
      summary: Change password
      description: Change password of user with id
      operationId: edit_user
      parameters:
        - name: userId
          in: path
          description: ID of user whose password is to be changed
          required: true
          schema:
            type: integer
            format: int64
  /users/{userId}/role:
    put:
      tags:
        - users
      summary: Change role
      description: Change role of user with id (admin only)
      operationId: change_user_role
      parameters:
        - name: userId
          in: path
          description: ID of user whose role is to be changed
          required: true
          schema:
            type: integer
            format: int64
  /roles:
    get:
      tags:
        - users
      summary: List user roles
      description: List all user roles (admin only)
      operationId: get_roles
  /processes:
    post:
      tags:
        - processes
      summary: Create new process type
      description: Create new process type
      operationId: create_process
    get:
      tags:
        - processes
      summary: List processes
      description: List all process/machine types
      operationId: get_processes
  /processes/{processId}:
    get:
      tags:
        - processes
      summary: Get process type
      description: Return existing process type
      operationId: get_process
      parameters:
        - name: processId
          in: path
          description: ID of process type to return
          required: true
          schema:
            type: integer
            format: int64
    put:
      tags:
        - processes
      summary: Update process type
      description: Update existing process type
      operationId: update_process
      parameters:
        - name: processId
          in: path
          description: ID of process type to update
          required: true
          schema:
            type: integer
            format: int64
    delete:
      tags:
        - processes
      summary: Delete process type
      description: Delete existing process type
      operationId: delete_process
      parameters:
        - name: processId
          in: path
          description: ID of process type to delete
          required: true
          schema:
            type: integer
            format: int64
  /processes/{processId}/full:
    get:
      tags:
        - processes
      summary: Get detailed process type
      description: Return detailed information about existing process type
      operationId: get_process_details
      parameters:
        - name: processId
          in: path
          description: ID of process type to return
          required: true
          schema:
            type: integer
            format: int64
  /processes/{processId}/variants:
    get:
      tags:
        - processes
      summary: Variants for process type
      description: Return variant information about existing process type
      operationId: get_variants
      parameters:
        - name: processId
          in: path
          description: ID of process type for which variants are to be returned
          required: true
          schema:
            type: integer
            format: int64
  /processes/{processId}/info_texts:
    get:
      tags:
        - processes
      summary: Info texts for process type
      description: Return info texts existing process type
      operationId: get_info_texts
      parameters:
        - name: processId
          in: path
          description: ID of process type for which info texts are to be returned
          required: true
          schema:
            type: integer
            format: int64
  /processes/{processId}/selection:
    get:
      tags:
        - processes
      summary: Variant selection for process type
      description: Return variant selection for existing process type
      operationId: get_selection
      parameters:
        - name: processId
          in: path
          description: ID of process type for which variant selection is to be returned
          required: true
          schema:
            type: integer
            format: int64
    post:
      tags:
        - processes
      summary: Create selection for process type
      description: Create variant selection for existing process type
      operationId: create_selection
      parameters:
        - name: processId
          in: path
          description: ID of process type for which variant selection is to be created
          required: true
          schema:
            type: integer
            format: int64
  /variants/{variantId}:
    get:
      tags:
        - processes
      summary: Get variant
      description: Return variant information by id
      operationId: get_variant
      parameters:
        - name: variantId
          in: path
          description: ID of variant to return
          required: true
          schema:
            type: integer
            format: int64
  /processes/used-component-types:
    get:
      tags:
        - processes
      summary: Get used component types
      description: Return all component types used by any process type definition
      operationId: used_component_types
  /problems/{processId}:
    post:
      tags:
        - problems
      summary: Optimization request
      description: Trigger optimization request for process type
      operationId: handle_problem
      parameters:
        - name: processId
          in: path
          description: ID of process type for which optimization is requested
          required: true
          schema:
            type: integer
            format: int64
  /problems/result/{timestamp}:
    get:
      tags:
        - problems
      summary: Get optimization result
      description: Check for optimization result by timestamp
      operationId: get_result
      parameters:
        - name: timestamp
          in: path
          description: Timestamp of optimization request
          required: true
          schema:
            type: string
            format: date-time
    delete:
      tags:
        - problems
      summary: Delete optimization result
      description: Delete optimization result by timestamp
      operationId: delete_result
      parameters:
        - name: timestamp
          in: path
          description: Timestamp of optimization request
          required: true
          schema:
            type: string
            format: date-time
  /problems/results:
    get:
      tags:
        - problems
      summary: List optimization results
      description: List all optimization results
      operationId: get_results
  /problems/{processId}/results:
    get:
      tags:
        - problems
      summary: List optimization results for process type
      description: List all optimization results for process type
      operationId: get_results_by_process
      parameters:
        - name: processId
          in: path
          description: ID of process type for which optimization results are to be returned
          required: true
          schema:
            type: integer
            format: int64
  /machines/{variantId}/explore:
    post:
      tags:
        - machines
      summary: Explore machine parameter range
      description: Explore machine parameter range for variant
      operationId: explore_machine
      parameters:
        - name: variantId
          in: path
          description: ID of variant for which a machine exploration is requested
          required: true
          schema:
            type: integer
            format: int64
  /machines/{variantId}/optimize:
    post:
      tags:
        - machines
      summary: Optimize process parameters for machine
      description: Optimize process parameters for machine of specific variant
      operationId: optimize_machine_parameters
      parameters:
        - name: variantId
          in: path
          description: ID of variant for which a process parameter optimization is requested
          required: true
          schema:
            type: integer
            format: int64
  /properties:
    post:
      tags:
        - properties
      summary: Create property
      description: Create new property type
      operationId: new_property
    get:
      tags:
        - properties
      summary: List property types
      description: List all property types
      operationId: get_properties
  /properties/{propertyId}:
    put:
      tags:
        - properties
      summary: Update property type
      description: Update existing property type by id
      operationId: edit_properties
      parameters:
        - name: propertyId
          in: path
          description: ID of property type to be changed
          required: true
          schema:
            type: integer
            format: int64
    delete:
      tags:
        - properties
      summary: Delete property type
      description: Delete existing property type by id
      operationId: del_property
      parameters:
        - name: propertyId
          in: path
          description: ID of property type to be deleted
          required: true
          schema:
            type: integer
            format: int64
  /properties/values:
    post:
      tags:
        - properties
      summary: Create property value
      description: Create new property value
      operationId: new_prop_value
    get:
      tags:
        - properties
      summary: Get property values
      description: List all values of all property types
      operationId: get_prop_values
  /properties/values/{propertyValueId}:
    put:
      tags:
        - properties
      summary: Change property value
      description: Change existing property value
      operationId: edit_prop_value
      parameters:
        - name: propertyValueId
          in: path
          description: ID of property value to changed
          required: true
          schema:
            type: integer
            format: int64
    delete:
      tags:
        - properties
      summary: Delete property values
      description: Delete existing property value
      operationId: del_prop_value
      parameters:
        - name: propertyValueId
          in: path
          description: ID of property value to be deleted
          required: true
          schema:
            type: integer
            format: int64
  /glossary:
    post:
      tags:
        - glossary
      summary: Create glossary entry
      description: Create new glossary entry
      operationId: new_glossary
    get:
      tags:
        - glossary
      summary: List glossary entries
      description: List all glossary entries
      operationId: get_glossary
  /glossary/{glossaryId}:
    get:
      tags:
        - glossary
      summary: Get glossary entry
      description: Get existing glossary entry by id
      operationId: get_glossary_item
      parameters:
        - name: glossaryId
          in: path
          description: ID of glossary entry to be returned
          required: true
          schema:
            type: integer
            format: int64
    put:
      tags:
        - glossary
      summary: Edit glossary entry
      description: Edit existing glossary entry by id
      operationId: edit_glossary
      parameters:
        - name: glossaryId
          in: path
          description: ID of glossary entry to be changed
          required: true
          schema:
            type: integer
            format: int64
    delete:
      tags:
        - glossary
      summary: Delete glossary entry
      description: Delete existing glossary entry by id
      operationId: del_glossary
      parameters:
        - name: glossaryId
          in: path
          description: ID of glossary entry to be deleted
          required: true
          schema:
            type: integer
            format: int64
  /components/{componentType}:
    post:
      tags:
        - components
      summary: Create component entry
      description: Create new component entry of component type
      operationId: new_component
      parameters:
        - name: componentType
          in: path
          description: Name of component type for which new entry is to be created
          required: true
          schema:
            type: string
            example: motors
    get:
      tags:
        - components
      summary: List component entries for type
      description: List component entries of component type
      operationId: get_components
      parameters:
        - name: componentType
          in: path
          description: Name of component type for which entries are to be returned
          required: true
          schema:
            type: string
            example: motors
  /components/{componentType}/{entryId}:
    get:
      tags:
        - components
      summary: Get component entry
      description: Get existing component entry of component type
      operationId: get_component
      parameters:
        - name: componentType
          in: path
          description: Name of component type for which entry is to be returned
          required: true
          schema:
            type: string
            example: motors
        - name: entryId
          in: path
          description: ID of component entry to be returned
          required: true
          schema:
            type: integer
            format: int64
    put:
      tags:
        - components
      summary: Update component entry
      description: Update existing component entry
      operationId: edit_component
      parameters:
        - name: componentType
          in: path
          description: Name of component type for which entries are to be changed
          required: true
          schema:
            type: string
            example: motors
        - name: entryId
          in: path
          description: ID of component entry to be changed
          required: true
          schema:
            type: integer
            format: int64
    delete:
      tags:
        - components
      summary: Delete component entry
      description: Delete existing component entry by type and id
      operationId: del_component
      parameters:
        - name: componentType
          in: path
          description: Name of component type for which entries is to be deleted
          required: true
          schema:
            type: string
            example: motors
        - name: entryId
          in: path
          description: ID of component entry to be deleted
          required: true
          schema:
            type: integer
            format: int64
  /components/{componentType}/upload:
    post:
      tags:
        - components
      summary: Upload component description file
      description: Upload component description file in Excel or CSV format
      operationId: upload_components
      parameters:
        - name: componentType
          in: path
          description: Name of component type for which entries are to be imported
          required: true
          schema:
            type: string
            example: motors
      requestBody:
        description: Updload excel or csv for import of component data
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary

  /pets:
    put:
      tags:
        - pet
      summary: Update an existing pet
      description: Update an existing pet by Id
      operationId: updatePet
      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '500':
          description: Invalid ID supplied
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - pet
      summary: Add a new pet to the store
      description: Add a new pet to the store
      operationId: addPet
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/findByStatus:
    get:
      tags:
        - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/findByTags:
    get:
      tags:
        - pet
      summary: Finds Pets by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid tag value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/{petId}:
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      description: ''
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of pet that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - pet
      summary: Deletes a pet
      description: delete a pet
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/{petId}/uploadImage:
    post:
      tags:
        - pet
      summary: uploads an image
      description: ''
      operationId: uploadFile
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input
  /store/order/{orderId}:
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    Auth:
      type: object
      properties:
        username:
          type: string
          example: 'user'
          maxLength: 20
        password:
          type: string
          example: 'pwd'
    Token:
      type: object
      properties:
        status:
          type: string
          enum:
            - ok
        user:
          type: string
          description: JWT Token containing user information and expiration date
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header